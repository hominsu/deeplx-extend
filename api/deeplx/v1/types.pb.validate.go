// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: deeplx/v1/types.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Text with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Text) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Text with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TextMultiError, or nil if none found.
func (m *Text) ValidateAll() error {
	return m.validate(true)
}

func (m *Text) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Text

	// no validation rules for RequestAlternatives

	if len(errors) > 0 {
		return TextMultiError(errors)
	}

	return nil
}

// TextMultiError is an error wrapping multiple validation errors returned by
// Text.ValidateAll() if the designated constraints aren't met.
type TextMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TextMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TextMultiError) AllErrors() []error { return m }

// TextValidationError is the validation error returned by Text.Validate if the
// designated constraints aren't met.
type TextValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TextValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TextValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TextValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TextValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TextValidationError) ErrorName() string { return "TextValidationError" }

// Error satisfies the builtin error interface
func (e TextValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sText.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TextValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TextValidationError{}

// Validate checks the field values on Lang with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Lang) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Lang with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in LangMultiError, or nil if none found.
func (m *Lang) ValidateAll() error {
	return m.validate(true)
}

func (m *Lang) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SourceLangUserSelected

	// no validation rules for TargetLang

	if len(errors) > 0 {
		return LangMultiError(errors)
	}

	return nil
}

// LangMultiError is an error wrapping multiple validation errors returned by
// Lang.ValidateAll() if the designated constraints aren't met.
type LangMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LangMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LangMultiError) AllErrors() []error { return m }

// LangValidationError is the validation error returned by Lang.Validate if the
// designated constraints aren't met.
type LangValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LangValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LangValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LangValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LangValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LangValidationError) ErrorName() string { return "LangValidationError" }

// Error satisfies the builtin error interface
func (e LangValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLang.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LangValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LangValidationError{}

// Validate checks the field values on CommonJobParams with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CommonJobParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommonJobParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CommonJobParamsMultiError, or nil if none found.
func (m *CommonJobParams) ValidateAll() error {
	return m.validate(true)
}

func (m *CommonJobParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WasSpoken

	// no validation rules for TranscribeAs

	// no validation rules for RegionalVariant

	if len(errors) > 0 {
		return CommonJobParamsMultiError(errors)
	}

	return nil
}

// CommonJobParamsMultiError is an error wrapping multiple validation errors
// returned by CommonJobParams.ValidateAll() if the designated constraints
// aren't met.
type CommonJobParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommonJobParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommonJobParamsMultiError) AllErrors() []error { return m }

// CommonJobParamsValidationError is the validation error returned by
// CommonJobParams.Validate if the designated constraints aren't met.
type CommonJobParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommonJobParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommonJobParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommonJobParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommonJobParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommonJobParamsValidationError) ErrorName() string { return "CommonJobParamsValidationError" }

// Error satisfies the builtin error interface
func (e CommonJobParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommonJobParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommonJobParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommonJobParamsValidationError{}

// Validate checks the field values on Params with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Params) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Params with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ParamsMultiError, or nil if none found.
func (m *Params) ValidateAll() error {
	return m.validate(true)
}

func (m *Params) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTexts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ParamsValidationError{
						field:  fmt.Sprintf("Texts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ParamsValidationError{
						field:  fmt.Sprintf("Texts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ParamsValidationError{
					field:  fmt.Sprintf("Texts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Splitting

	if all {
		switch v := interface{}(m.GetLang()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ParamsValidationError{
					field:  "Lang",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ParamsValidationError{
					field:  "Lang",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLang()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ParamsValidationError{
				field:  "Lang",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Timestamp

	if all {
		switch v := interface{}(m.GetCommonJobParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ParamsValidationError{
					field:  "CommonJobParams",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ParamsValidationError{
					field:  "CommonJobParams",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonJobParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ParamsValidationError{
				field:  "CommonJobParams",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ParamsMultiError(errors)
	}

	return nil
}

// ParamsMultiError is an error wrapping multiple validation errors returned by
// Params.ValidateAll() if the designated constraints aren't met.
type ParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ParamsMultiError) AllErrors() []error { return m }

// ParamsValidationError is the validation error returned by Params.Validate if
// the designated constraints aren't met.
type ParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ParamsValidationError) ErrorName() string { return "ParamsValidationError" }

// Error satisfies the builtin error interface
func (e ParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ParamsValidationError{}

// Validate checks the field values on PostData with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PostData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PostData with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PostDataMultiError, or nil
// if none found.
func (m *PostData) ValidateAll() error {
	return m.validate(true)
}

func (m *PostData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Jsonrpc

	// no validation rules for Method

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PostDataValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PostDataValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PostDataValidationError{
				field:  "Params",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PostDataMultiError(errors)
	}

	return nil
}

// PostDataMultiError is an error wrapping multiple validation errors returned
// by PostData.ValidateAll() if the designated constraints aren't met.
type PostDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PostDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PostDataMultiError) AllErrors() []error { return m }

// PostDataValidationError is the validation error returned by
// PostData.Validate if the designated constraints aren't met.
type PostDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostDataValidationError) ErrorName() string { return "PostDataValidationError" }

// Error satisfies the builtin error interface
func (e PostDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPostData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostDataValidationError{}

// Validate checks the field values on TranslationResult with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TranslationResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TranslationResult with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TranslationResultMultiError, or nil if none found.
func (m *TranslationResult) ValidateAll() error {
	return m.validate(true)
}

func (m *TranslationResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Id

	// no validation rules for Data

	// no validation rules for SourceLang

	// no validation rules for TargetLang

	// no validation rules for Method

	if len(errors) > 0 {
		return TranslationResultMultiError(errors)
	}

	return nil
}

// TranslationResultMultiError is an error wrapping multiple validation errors
// returned by TranslationResult.ValidateAll() if the designated constraints
// aren't met.
type TranslationResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TranslationResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TranslationResultMultiError) AllErrors() []error { return m }

// TranslationResultValidationError is the validation error returned by
// TranslationResult.Validate if the designated constraints aren't met.
type TranslationResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TranslationResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TranslationResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TranslationResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TranslationResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TranslationResultValidationError) ErrorName() string {
	return "TranslationResultValidationError"
}

// Error satisfies the builtin error interface
func (e TranslationResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTranslationResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TranslationResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TranslationResultValidationError{}

// Validate checks the field values on PayloadAPI with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PayloadAPI) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PayloadAPI with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PayloadAPIMultiError, or
// nil if none found.
func (m *PayloadAPI) ValidateAll() error {
	return m.validate(true)
}

func (m *PayloadAPI) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TargetLang

	// no validation rules for SourceLang

	if len(errors) > 0 {
		return PayloadAPIMultiError(errors)
	}

	return nil
}

// PayloadAPIMultiError is an error wrapping multiple validation errors
// returned by PayloadAPI.ValidateAll() if the designated constraints aren't met.
type PayloadAPIMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PayloadAPIMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PayloadAPIMultiError) AllErrors() []error { return m }

// PayloadAPIValidationError is the validation error returned by
// PayloadAPI.Validate if the designated constraints aren't met.
type PayloadAPIValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PayloadAPIValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PayloadAPIValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PayloadAPIValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PayloadAPIValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PayloadAPIValidationError) ErrorName() string { return "PayloadAPIValidationError" }

// Error satisfies the builtin error interface
func (e PayloadAPIValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPayloadAPI.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PayloadAPIValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PayloadAPIValidationError{}

// Validate checks the field values on Translation with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Translation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Translation with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TranslationMultiError, or
// nil if none found.
func (m *Translation) ValidateAll() error {
	return m.validate(true)
}

func (m *Translation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Text

	if len(errors) > 0 {
		return TranslationMultiError(errors)
	}

	return nil
}

// TranslationMultiError is an error wrapping multiple validation errors
// returned by Translation.ValidateAll() if the designated constraints aren't met.
type TranslationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TranslationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TranslationMultiError) AllErrors() []error { return m }

// TranslationValidationError is the validation error returned by
// Translation.Validate if the designated constraints aren't met.
type TranslationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TranslationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TranslationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TranslationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TranslationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TranslationValidationError) ErrorName() string { return "TranslationValidationError" }

// Error satisfies the builtin error interface
func (e TranslationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTranslation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TranslationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TranslationValidationError{}

// Validate checks the field values on TranslationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TranslationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TranslationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TranslationResponseMultiError, or nil if none found.
func (m *TranslationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TranslationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTranslations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TranslationResponseValidationError{
						field:  fmt.Sprintf("Translations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TranslationResponseValidationError{
						field:  fmt.Sprintf("Translations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TranslationResponseValidationError{
					field:  fmt.Sprintf("Translations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TranslationResponseMultiError(errors)
	}

	return nil
}

// TranslationResponseMultiError is an error wrapping multiple validation
// errors returned by TranslationResponse.ValidateAll() if the designated
// constraints aren't met.
type TranslationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TranslationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TranslationResponseMultiError) AllErrors() []error { return m }

// TranslationResponseValidationError is the validation error returned by
// TranslationResponse.Validate if the designated constraints aren't met.
type TranslationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TranslationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TranslationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TranslationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TranslationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TranslationResponseValidationError) ErrorName() string {
	return "TranslationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TranslationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTranslationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TranslationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TranslationResponseValidationError{}

// Validate checks the field values on DeepLUsageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeepLUsageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeepLUsageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeepLUsageResponseMultiError, or nil if none found.
func (m *DeepLUsageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeepLUsageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CharacterCount

	// no validation rules for CharacterLimit

	if len(errors) > 0 {
		return DeepLUsageResponseMultiError(errors)
	}

	return nil
}

// DeepLUsageResponseMultiError is an error wrapping multiple validation errors
// returned by DeepLUsageResponse.ValidateAll() if the designated constraints
// aren't met.
type DeepLUsageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeepLUsageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeepLUsageResponseMultiError) AllErrors() []error { return m }

// DeepLUsageResponseValidationError is the validation error returned by
// DeepLUsageResponse.Validate if the designated constraints aren't met.
type DeepLUsageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeepLUsageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeepLUsageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeepLUsageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeepLUsageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeepLUsageResponseValidationError) ErrorName() string {
	return "DeepLUsageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeepLUsageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeepLUsageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeepLUsageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeepLUsageResponseValidationError{}
