// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             (unknown)
// source: deeplx/v1/translate.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationDeepLXServiceTranslate = "/deeplx.v1.DeepLXService/Translate"

type DeepLXServiceHTTPServer interface {
	Translate(context.Context, *TranslateRequest) (*TranslationResult, error)
}

func RegisterDeepLXServiceHTTPServer(s *http.Server, srv DeepLXServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/{token}/translate", _DeepLXService_Translate0_HTTP_Handler(srv))
	r.POST("/translate", _DeepLXService_Translate1_HTTP_Handler(srv))
}

func _DeepLXService_Translate0_HTTP_Handler(srv DeepLXServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in TranslateRequest
		if err := ctx.Bind(&in.Payload); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDeepLXServiceTranslate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Translate(ctx, req.(*TranslateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*TranslationResult)
		return ctx.Result(200, reply)
	}
}

func _DeepLXService_Translate1_HTTP_Handler(srv DeepLXServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in TranslateRequest
		if err := ctx.Bind(&in.Payload); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDeepLXServiceTranslate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Translate(ctx, req.(*TranslateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*TranslationResult)
		return ctx.Result(200, reply)
	}
}

type DeepLXServiceHTTPClient interface {
	Translate(ctx context.Context, req *TranslateRequest, opts ...http.CallOption) (rsp *TranslationResult, err error)
}

type DeepLXServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewDeepLXServiceHTTPClient(client *http.Client) DeepLXServiceHTTPClient {
	return &DeepLXServiceHTTPClientImpl{client}
}

func (c *DeepLXServiceHTTPClientImpl) Translate(ctx context.Context, in *TranslateRequest, opts ...http.CallOption) (*TranslationResult, error) {
	var out TranslationResult
	pattern := "/translate"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDeepLXServiceTranslate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Payload, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
