// Code generated by ent, DO NOT EDIT.

package accesslog

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/oio-network/deeplx-extend/schema/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldEQ(FieldCreatedAt, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int64) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldEQ(FieldUserID, v))
}

// IP applies equality check predicate on the "ip" field. It's identical to IPEQ.
func IP(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldEQ(FieldIP, v))
}

// CountryName applies equality check predicate on the "country_name" field. It's identical to CountryNameEQ.
func CountryName(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldEQ(FieldCountryName, v))
}

// CountryCode applies equality check predicate on the "country_code" field. It's identical to CountryCodeEQ.
func CountryCode(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldEQ(FieldCountryCode, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldLTE(FieldCreatedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int64) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int64) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int64) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int64) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.AccessLog {
	return predicate.AccessLog(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.AccessLog {
	return predicate.AccessLog(sql.FieldNotNull(FieldUserID))
}

// IPEQ applies the EQ predicate on the "ip" field.
func IPEQ(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldEQ(FieldIP, v))
}

// IPNEQ applies the NEQ predicate on the "ip" field.
func IPNEQ(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldNEQ(FieldIP, v))
}

// IPIn applies the In predicate on the "ip" field.
func IPIn(vs ...string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldIn(FieldIP, vs...))
}

// IPNotIn applies the NotIn predicate on the "ip" field.
func IPNotIn(vs ...string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldNotIn(FieldIP, vs...))
}

// IPGT applies the GT predicate on the "ip" field.
func IPGT(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldGT(FieldIP, v))
}

// IPGTE applies the GTE predicate on the "ip" field.
func IPGTE(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldGTE(FieldIP, v))
}

// IPLT applies the LT predicate on the "ip" field.
func IPLT(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldLT(FieldIP, v))
}

// IPLTE applies the LTE predicate on the "ip" field.
func IPLTE(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldLTE(FieldIP, v))
}

// IPContains applies the Contains predicate on the "ip" field.
func IPContains(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldContains(FieldIP, v))
}

// IPHasPrefix applies the HasPrefix predicate on the "ip" field.
func IPHasPrefix(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldHasPrefix(FieldIP, v))
}

// IPHasSuffix applies the HasSuffix predicate on the "ip" field.
func IPHasSuffix(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldHasSuffix(FieldIP, v))
}

// IPEqualFold applies the EqualFold predicate on the "ip" field.
func IPEqualFold(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldEqualFold(FieldIP, v))
}

// IPContainsFold applies the ContainsFold predicate on the "ip" field.
func IPContainsFold(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldContainsFold(FieldIP, v))
}

// CountryNameEQ applies the EQ predicate on the "country_name" field.
func CountryNameEQ(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldEQ(FieldCountryName, v))
}

// CountryNameNEQ applies the NEQ predicate on the "country_name" field.
func CountryNameNEQ(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldNEQ(FieldCountryName, v))
}

// CountryNameIn applies the In predicate on the "country_name" field.
func CountryNameIn(vs ...string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldIn(FieldCountryName, vs...))
}

// CountryNameNotIn applies the NotIn predicate on the "country_name" field.
func CountryNameNotIn(vs ...string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldNotIn(FieldCountryName, vs...))
}

// CountryNameGT applies the GT predicate on the "country_name" field.
func CountryNameGT(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldGT(FieldCountryName, v))
}

// CountryNameGTE applies the GTE predicate on the "country_name" field.
func CountryNameGTE(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldGTE(FieldCountryName, v))
}

// CountryNameLT applies the LT predicate on the "country_name" field.
func CountryNameLT(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldLT(FieldCountryName, v))
}

// CountryNameLTE applies the LTE predicate on the "country_name" field.
func CountryNameLTE(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldLTE(FieldCountryName, v))
}

// CountryNameContains applies the Contains predicate on the "country_name" field.
func CountryNameContains(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldContains(FieldCountryName, v))
}

// CountryNameHasPrefix applies the HasPrefix predicate on the "country_name" field.
func CountryNameHasPrefix(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldHasPrefix(FieldCountryName, v))
}

// CountryNameHasSuffix applies the HasSuffix predicate on the "country_name" field.
func CountryNameHasSuffix(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldHasSuffix(FieldCountryName, v))
}

// CountryNameIsNil applies the IsNil predicate on the "country_name" field.
func CountryNameIsNil() predicate.AccessLog {
	return predicate.AccessLog(sql.FieldIsNull(FieldCountryName))
}

// CountryNameNotNil applies the NotNil predicate on the "country_name" field.
func CountryNameNotNil() predicate.AccessLog {
	return predicate.AccessLog(sql.FieldNotNull(FieldCountryName))
}

// CountryNameEqualFold applies the EqualFold predicate on the "country_name" field.
func CountryNameEqualFold(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldEqualFold(FieldCountryName, v))
}

// CountryNameContainsFold applies the ContainsFold predicate on the "country_name" field.
func CountryNameContainsFold(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldContainsFold(FieldCountryName, v))
}

// CountryCodeEQ applies the EQ predicate on the "country_code" field.
func CountryCodeEQ(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldEQ(FieldCountryCode, v))
}

// CountryCodeNEQ applies the NEQ predicate on the "country_code" field.
func CountryCodeNEQ(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldNEQ(FieldCountryCode, v))
}

// CountryCodeIn applies the In predicate on the "country_code" field.
func CountryCodeIn(vs ...string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldIn(FieldCountryCode, vs...))
}

// CountryCodeNotIn applies the NotIn predicate on the "country_code" field.
func CountryCodeNotIn(vs ...string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldNotIn(FieldCountryCode, vs...))
}

// CountryCodeGT applies the GT predicate on the "country_code" field.
func CountryCodeGT(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldGT(FieldCountryCode, v))
}

// CountryCodeGTE applies the GTE predicate on the "country_code" field.
func CountryCodeGTE(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldGTE(FieldCountryCode, v))
}

// CountryCodeLT applies the LT predicate on the "country_code" field.
func CountryCodeLT(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldLT(FieldCountryCode, v))
}

// CountryCodeLTE applies the LTE predicate on the "country_code" field.
func CountryCodeLTE(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldLTE(FieldCountryCode, v))
}

// CountryCodeContains applies the Contains predicate on the "country_code" field.
func CountryCodeContains(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldContains(FieldCountryCode, v))
}

// CountryCodeHasPrefix applies the HasPrefix predicate on the "country_code" field.
func CountryCodeHasPrefix(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldHasPrefix(FieldCountryCode, v))
}

// CountryCodeHasSuffix applies the HasSuffix predicate on the "country_code" field.
func CountryCodeHasSuffix(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldHasSuffix(FieldCountryCode, v))
}

// CountryCodeIsNil applies the IsNil predicate on the "country_code" field.
func CountryCodeIsNil() predicate.AccessLog {
	return predicate.AccessLog(sql.FieldIsNull(FieldCountryCode))
}

// CountryCodeNotNil applies the NotNil predicate on the "country_code" field.
func CountryCodeNotNil() predicate.AccessLog {
	return predicate.AccessLog(sql.FieldNotNull(FieldCountryCode))
}

// CountryCodeEqualFold applies the EqualFold predicate on the "country_code" field.
func CountryCodeEqualFold(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldEqualFold(FieldCountryCode, v))
}

// CountryCodeContainsFold applies the ContainsFold predicate on the "country_code" field.
func CountryCodeContainsFold(v string) predicate.AccessLog {
	return predicate.AccessLog(sql.FieldContainsFold(FieldCountryCode, v))
}

// HasOwnerUser applies the HasEdge predicate on the "owner_user" edge.
func HasOwnerUser() predicate.AccessLog {
	return predicate.AccessLog(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerUserTable, OwnerUserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerUserWith applies the HasEdge predicate on the "owner_user" edge with a given conditions (other predicates).
func HasOwnerUserWith(preds ...predicate.User) predicate.AccessLog {
	return predicate.AccessLog(func(s *sql.Selector) {
		step := newOwnerUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AccessLog) predicate.AccessLog {
	return predicate.AccessLog(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AccessLog) predicate.AccessLog {
	return predicate.AccessLog(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AccessLog) predicate.AccessLog {
	return predicate.AccessLog(sql.NotPredicates(p))
}
