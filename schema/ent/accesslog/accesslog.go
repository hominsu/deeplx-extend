// Code generated by ent, DO NOT EDIT.

package accesslog

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the accesslog type in the database.
	Label = "access_log"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldIP holds the string denoting the ip field in the database.
	FieldIP = "ip"
	// FieldCountryName holds the string denoting the country_name field in the database.
	FieldCountryName = "country_name"
	// FieldCountryCode holds the string denoting the country_code field in the database.
	FieldCountryCode = "country_code"
	// EdgeOwnerUser holds the string denoting the owner_user edge name in mutations.
	EdgeOwnerUser = "owner_user"
	// Table holds the table name of the accesslog in the database.
	Table = "access_logs"
	// OwnerUserTable is the table that holds the owner_user relation/edge.
	OwnerUserTable = "access_logs"
	// OwnerUserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	OwnerUserInverseTable = "users"
	// OwnerUserColumn is the table column denoting the owner_user relation/edge.
	OwnerUserColumn = "user_id"
)

// Columns holds all SQL columns for accesslog fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUserID,
	FieldIP,
	FieldCountryName,
	FieldCountryCode,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the AccessLog queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByIP orders the results by the ip field.
func ByIP(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIP, opts...).ToFunc()
}

// ByCountryName orders the results by the country_name field.
func ByCountryName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCountryName, opts...).ToFunc()
}

// ByCountryCode orders the results by the country_code field.
func ByCountryCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCountryCode, opts...).ToFunc()
}

// ByOwnerUserField orders the results by owner_user field.
func ByOwnerUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnerUserStep(), sql.OrderByField(field, opts...))
	}
}
func newOwnerUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnerUserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OwnerUserTable, OwnerUserColumn),
	)
}
