// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/oio-network/deeplx-extend/app/deeplx/internal/data/ent/accesslog"
	"github.com/oio-network/deeplx-extend/app/deeplx/internal/data/ent/user"
)

// AccessLogCreate is the builder for creating a AccessLog entity.
type AccessLogCreate struct {
	config
	mutation *AccessLogMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (alc *AccessLogCreate) SetCreatedAt(t time.Time) *AccessLogCreate {
	alc.mutation.SetCreatedAt(t)
	return alc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (alc *AccessLogCreate) SetNillableCreatedAt(t *time.Time) *AccessLogCreate {
	if t != nil {
		alc.SetCreatedAt(*t)
	}
	return alc
}

// SetUserID sets the "user_id" field.
func (alc *AccessLogCreate) SetUserID(i int64) *AccessLogCreate {
	alc.mutation.SetUserID(i)
	return alc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (alc *AccessLogCreate) SetNillableUserID(i *int64) *AccessLogCreate {
	if i != nil {
		alc.SetUserID(*i)
	}
	return alc
}

// SetIP sets the "ip" field.
func (alc *AccessLogCreate) SetIP(s string) *AccessLogCreate {
	alc.mutation.SetIP(s)
	return alc
}

// SetCountryName sets the "country_name" field.
func (alc *AccessLogCreate) SetCountryName(s string) *AccessLogCreate {
	alc.mutation.SetCountryName(s)
	return alc
}

// SetCountryCode sets the "country_code" field.
func (alc *AccessLogCreate) SetCountryCode(s string) *AccessLogCreate {
	alc.mutation.SetCountryCode(s)
	return alc
}

// SetID sets the "id" field.
func (alc *AccessLogCreate) SetID(i int64) *AccessLogCreate {
	alc.mutation.SetID(i)
	return alc
}

// SetOwnerUserID sets the "owner_user" edge to the User entity by ID.
func (alc *AccessLogCreate) SetOwnerUserID(id int64) *AccessLogCreate {
	alc.mutation.SetOwnerUserID(id)
	return alc
}

// SetNillableOwnerUserID sets the "owner_user" edge to the User entity by ID if the given value is not nil.
func (alc *AccessLogCreate) SetNillableOwnerUserID(id *int64) *AccessLogCreate {
	if id != nil {
		alc = alc.SetOwnerUserID(*id)
	}
	return alc
}

// SetOwnerUser sets the "owner_user" edge to the User entity.
func (alc *AccessLogCreate) SetOwnerUser(u *User) *AccessLogCreate {
	return alc.SetOwnerUserID(u.ID)
}

// Mutation returns the AccessLogMutation object of the builder.
func (alc *AccessLogCreate) Mutation() *AccessLogMutation {
	return alc.mutation
}

// Save creates the AccessLog in the database.
func (alc *AccessLogCreate) Save(ctx context.Context) (*AccessLog, error) {
	alc.defaults()
	return withHooks(ctx, alc.sqlSave, alc.mutation, alc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (alc *AccessLogCreate) SaveX(ctx context.Context) *AccessLog {
	v, err := alc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (alc *AccessLogCreate) Exec(ctx context.Context) error {
	_, err := alc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (alc *AccessLogCreate) ExecX(ctx context.Context) {
	if err := alc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (alc *AccessLogCreate) defaults() {
	if _, ok := alc.mutation.CreatedAt(); !ok {
		v := accesslog.DefaultCreatedAt()
		alc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (alc *AccessLogCreate) check() error {
	if _, ok := alc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "AccessLog.created_at"`)}
	}
	if _, ok := alc.mutation.IP(); !ok {
		return &ValidationError{Name: "ip", err: errors.New(`ent: missing required field "AccessLog.ip"`)}
	}
	if _, ok := alc.mutation.CountryName(); !ok {
		return &ValidationError{Name: "country_name", err: errors.New(`ent: missing required field "AccessLog.country_name"`)}
	}
	if _, ok := alc.mutation.CountryCode(); !ok {
		return &ValidationError{Name: "country_code", err: errors.New(`ent: missing required field "AccessLog.country_code"`)}
	}
	return nil
}

func (alc *AccessLogCreate) sqlSave(ctx context.Context) (*AccessLog, error) {
	if err := alc.check(); err != nil {
		return nil, err
	}
	_node, _spec := alc.createSpec()
	if err := sqlgraph.CreateNode(ctx, alc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	alc.mutation.id = &_node.ID
	alc.mutation.done = true
	return _node, nil
}

func (alc *AccessLogCreate) createSpec() (*AccessLog, *sqlgraph.CreateSpec) {
	var (
		_node = &AccessLog{config: alc.config}
		_spec = sqlgraph.NewCreateSpec(accesslog.Table, sqlgraph.NewFieldSpec(accesslog.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = alc.conflict
	if id, ok := alc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := alc.mutation.CreatedAt(); ok {
		_spec.SetField(accesslog.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := alc.mutation.IP(); ok {
		_spec.SetField(accesslog.FieldIP, field.TypeString, value)
		_node.IP = value
	}
	if value, ok := alc.mutation.CountryName(); ok {
		_spec.SetField(accesslog.FieldCountryName, field.TypeString, value)
		_node.CountryName = value
	}
	if value, ok := alc.mutation.CountryCode(); ok {
		_spec.SetField(accesslog.FieldCountryCode, field.TypeString, value)
		_node.CountryCode = value
	}
	if nodes := alc.mutation.OwnerUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accesslog.OwnerUserTable,
			Columns: []string{accesslog.OwnerUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AccessLog.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AccessLogUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (alc *AccessLogCreate) OnConflict(opts ...sql.ConflictOption) *AccessLogUpsertOne {
	alc.conflict = opts
	return &AccessLogUpsertOne{
		create: alc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AccessLog.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (alc *AccessLogCreate) OnConflictColumns(columns ...string) *AccessLogUpsertOne {
	alc.conflict = append(alc.conflict, sql.ConflictColumns(columns...))
	return &AccessLogUpsertOne{
		create: alc,
	}
}

type (
	// AccessLogUpsertOne is the builder for "upsert"-ing
	//  one AccessLog node.
	AccessLogUpsertOne struct {
		create *AccessLogCreate
	}

	// AccessLogUpsert is the "OnConflict" setter.
	AccessLogUpsert struct {
		*sql.UpdateSet
	}
)

// SetUserID sets the "user_id" field.
func (u *AccessLogUpsert) SetUserID(v int64) *AccessLogUpsert {
	u.Set(accesslog.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *AccessLogUpsert) UpdateUserID() *AccessLogUpsert {
	u.SetExcluded(accesslog.FieldUserID)
	return u
}

// ClearUserID clears the value of the "user_id" field.
func (u *AccessLogUpsert) ClearUserID() *AccessLogUpsert {
	u.SetNull(accesslog.FieldUserID)
	return u
}

// SetIP sets the "ip" field.
func (u *AccessLogUpsert) SetIP(v string) *AccessLogUpsert {
	u.Set(accesslog.FieldIP, v)
	return u
}

// UpdateIP sets the "ip" field to the value that was provided on create.
func (u *AccessLogUpsert) UpdateIP() *AccessLogUpsert {
	u.SetExcluded(accesslog.FieldIP)
	return u
}

// SetCountryName sets the "country_name" field.
func (u *AccessLogUpsert) SetCountryName(v string) *AccessLogUpsert {
	u.Set(accesslog.FieldCountryName, v)
	return u
}

// UpdateCountryName sets the "country_name" field to the value that was provided on create.
func (u *AccessLogUpsert) UpdateCountryName() *AccessLogUpsert {
	u.SetExcluded(accesslog.FieldCountryName)
	return u
}

// SetCountryCode sets the "country_code" field.
func (u *AccessLogUpsert) SetCountryCode(v string) *AccessLogUpsert {
	u.Set(accesslog.FieldCountryCode, v)
	return u
}

// UpdateCountryCode sets the "country_code" field to the value that was provided on create.
func (u *AccessLogUpsert) UpdateCountryCode() *AccessLogUpsert {
	u.SetExcluded(accesslog.FieldCountryCode)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.AccessLog.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(accesslog.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AccessLogUpsertOne) UpdateNewValues() *AccessLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(accesslog.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(accesslog.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AccessLog.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AccessLogUpsertOne) Ignore() *AccessLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AccessLogUpsertOne) DoNothing() *AccessLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AccessLogCreate.OnConflict
// documentation for more info.
func (u *AccessLogUpsertOne) Update(set func(*AccessLogUpsert)) *AccessLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AccessLogUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserID sets the "user_id" field.
func (u *AccessLogUpsertOne) SetUserID(v int64) *AccessLogUpsertOne {
	return u.Update(func(s *AccessLogUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *AccessLogUpsertOne) UpdateUserID() *AccessLogUpsertOne {
	return u.Update(func(s *AccessLogUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *AccessLogUpsertOne) ClearUserID() *AccessLogUpsertOne {
	return u.Update(func(s *AccessLogUpsert) {
		s.ClearUserID()
	})
}

// SetIP sets the "ip" field.
func (u *AccessLogUpsertOne) SetIP(v string) *AccessLogUpsertOne {
	return u.Update(func(s *AccessLogUpsert) {
		s.SetIP(v)
	})
}

// UpdateIP sets the "ip" field to the value that was provided on create.
func (u *AccessLogUpsertOne) UpdateIP() *AccessLogUpsertOne {
	return u.Update(func(s *AccessLogUpsert) {
		s.UpdateIP()
	})
}

// SetCountryName sets the "country_name" field.
func (u *AccessLogUpsertOne) SetCountryName(v string) *AccessLogUpsertOne {
	return u.Update(func(s *AccessLogUpsert) {
		s.SetCountryName(v)
	})
}

// UpdateCountryName sets the "country_name" field to the value that was provided on create.
func (u *AccessLogUpsertOne) UpdateCountryName() *AccessLogUpsertOne {
	return u.Update(func(s *AccessLogUpsert) {
		s.UpdateCountryName()
	})
}

// SetCountryCode sets the "country_code" field.
func (u *AccessLogUpsertOne) SetCountryCode(v string) *AccessLogUpsertOne {
	return u.Update(func(s *AccessLogUpsert) {
		s.SetCountryCode(v)
	})
}

// UpdateCountryCode sets the "country_code" field to the value that was provided on create.
func (u *AccessLogUpsertOne) UpdateCountryCode() *AccessLogUpsertOne {
	return u.Update(func(s *AccessLogUpsert) {
		s.UpdateCountryCode()
	})
}

// Exec executes the query.
func (u *AccessLogUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AccessLogCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AccessLogUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AccessLogUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AccessLogUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AccessLogCreateBulk is the builder for creating many AccessLog entities in bulk.
type AccessLogCreateBulk struct {
	config
	err      error
	builders []*AccessLogCreate
	conflict []sql.ConflictOption
}

// Save creates the AccessLog entities in the database.
func (alcb *AccessLogCreateBulk) Save(ctx context.Context) ([]*AccessLog, error) {
	if alcb.err != nil {
		return nil, alcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(alcb.builders))
	nodes := make([]*AccessLog, len(alcb.builders))
	mutators := make([]Mutator, len(alcb.builders))
	for i := range alcb.builders {
		func(i int, root context.Context) {
			builder := alcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AccessLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, alcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = alcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, alcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, alcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (alcb *AccessLogCreateBulk) SaveX(ctx context.Context) []*AccessLog {
	v, err := alcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (alcb *AccessLogCreateBulk) Exec(ctx context.Context) error {
	_, err := alcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (alcb *AccessLogCreateBulk) ExecX(ctx context.Context) {
	if err := alcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AccessLog.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AccessLogUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (alcb *AccessLogCreateBulk) OnConflict(opts ...sql.ConflictOption) *AccessLogUpsertBulk {
	alcb.conflict = opts
	return &AccessLogUpsertBulk{
		create: alcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AccessLog.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (alcb *AccessLogCreateBulk) OnConflictColumns(columns ...string) *AccessLogUpsertBulk {
	alcb.conflict = append(alcb.conflict, sql.ConflictColumns(columns...))
	return &AccessLogUpsertBulk{
		create: alcb,
	}
}

// AccessLogUpsertBulk is the builder for "upsert"-ing
// a bulk of AccessLog nodes.
type AccessLogUpsertBulk struct {
	create *AccessLogCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AccessLog.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(accesslog.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AccessLogUpsertBulk) UpdateNewValues() *AccessLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(accesslog.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(accesslog.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AccessLog.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AccessLogUpsertBulk) Ignore() *AccessLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AccessLogUpsertBulk) DoNothing() *AccessLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AccessLogCreateBulk.OnConflict
// documentation for more info.
func (u *AccessLogUpsertBulk) Update(set func(*AccessLogUpsert)) *AccessLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AccessLogUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserID sets the "user_id" field.
func (u *AccessLogUpsertBulk) SetUserID(v int64) *AccessLogUpsertBulk {
	return u.Update(func(s *AccessLogUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *AccessLogUpsertBulk) UpdateUserID() *AccessLogUpsertBulk {
	return u.Update(func(s *AccessLogUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *AccessLogUpsertBulk) ClearUserID() *AccessLogUpsertBulk {
	return u.Update(func(s *AccessLogUpsert) {
		s.ClearUserID()
	})
}

// SetIP sets the "ip" field.
func (u *AccessLogUpsertBulk) SetIP(v string) *AccessLogUpsertBulk {
	return u.Update(func(s *AccessLogUpsert) {
		s.SetIP(v)
	})
}

// UpdateIP sets the "ip" field to the value that was provided on create.
func (u *AccessLogUpsertBulk) UpdateIP() *AccessLogUpsertBulk {
	return u.Update(func(s *AccessLogUpsert) {
		s.UpdateIP()
	})
}

// SetCountryName sets the "country_name" field.
func (u *AccessLogUpsertBulk) SetCountryName(v string) *AccessLogUpsertBulk {
	return u.Update(func(s *AccessLogUpsert) {
		s.SetCountryName(v)
	})
}

// UpdateCountryName sets the "country_name" field to the value that was provided on create.
func (u *AccessLogUpsertBulk) UpdateCountryName() *AccessLogUpsertBulk {
	return u.Update(func(s *AccessLogUpsert) {
		s.UpdateCountryName()
	})
}

// SetCountryCode sets the "country_code" field.
func (u *AccessLogUpsertBulk) SetCountryCode(v string) *AccessLogUpsertBulk {
	return u.Update(func(s *AccessLogUpsert) {
		s.SetCountryCode(v)
	})
}

// UpdateCountryCode sets the "country_code" field to the value that was provided on create.
func (u *AccessLogUpsertBulk) UpdateCountryCode() *AccessLogUpsertBulk {
	return u.Update(func(s *AccessLogUpsert) {
		s.UpdateCountryCode()
	})
}

// Exec executes the query.
func (u *AccessLogUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AccessLogCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AccessLogCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AccessLogUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
